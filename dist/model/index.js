"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spend = exports.Loan = exports.Liability = exports.Investation = exports.Equity = exports.Asset = exports.Income = exports.User = void 0;
// model/index.ts
const user_1 = require("./user");
Object.defineProperty(exports, "User", { enumerable: true, get: function () { return user_1.User; } });
const income_1 = require("./income");
Object.defineProperty(exports, "Income", { enumerable: true, get: function () { return income_1.Income; } });
const asset_1 = require("./asset");
Object.defineProperty(exports, "Asset", { enumerable: true, get: function () { return asset_1.Asset; } });
const equity_1 = require("./equity");
Object.defineProperty(exports, "Equity", { enumerable: true, get: function () { return equity_1.Equity; } });
const investation_1 = require("./investation");
Object.defineProperty(exports, "Investation", { enumerable: true, get: function () { return investation_1.Investation; } });
const liability_1 = require("./liability");
Object.defineProperty(exports, "Liability", { enumerable: true, get: function () { return liability_1.Liability; } });
const loan_1 = require("./loan");
Object.defineProperty(exports, "Loan", { enumerable: true, get: function () { return loan_1.Loan; } });
const spend_1 = require("./spend");
Object.defineProperty(exports, "Spend", { enumerable: true, get: function () { return spend_1.Spend; } });
// Relasi
income_1.Income.belongsTo(user_1.User, { foreignKey: 'userId' });
user_1.User.hasMany(income_1.Income, { foreignKey: 'userId' });
spend_1.Spend.belongsTo(user_1.User, { foreignKey: 'userId' });
user_1.User.hasMany(spend_1.Spend, { foreignKey: 'userId' });
asset_1.Asset.belongsTo(user_1.User, { foreignKey: 'userId' });
user_1.User.hasMany(asset_1.Asset, { foreignKey: 'userId' });
equity_1.Equity.belongsTo(user_1.User, { foreignKey: 'userId' });
user_1.User.hasMany(equity_1.Equity, { foreignKey: 'userId' });
investation_1.Investation.belongsTo(user_1.User, { foreignKey: 'userId' });
user_1.User.hasMany(investation_1.Investation, { foreignKey: 'userId' });
loan_1.Loan.belongsTo(user_1.User, { foreignKey: 'userId' });
user_1.User.hasMany(loan_1.Loan, { foreignKey: 'userId' });
liability_1.Liability.belongsTo(user_1.User, { foreignKey: 'userId' });
user_1.User.hasMany(liability_1.Liability, { foreignKey: 'userId' });
